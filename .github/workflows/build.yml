# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build

on:
  push:
    branches: [ "2.4.x" ]
  pull_request:
    branches: [ "2.4.x" ]

jobs:
  build:
    env:
      GIT_REF: ${{ github.ref }}
      GIT_SHA: ${{ github.sha }}
      Configuration: Release
      SolutionFile: .\src\NodaTime-Web.sln

    runs-on: windows-latest

    steps:
    - name: Check out our repo
      uses: actions/checkout@v3
      with:
        ref: 2.4.x

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        include-prerelease: false
        
        
    - name: Restore dependencies
      run: dotnet restore $Env:SolutionFile
    
    - name: Build
      run: dotnet build --no-restore  $Env:SolutionFile -c $Env:Configuration
    
    - name: Test
      run: dotnet test --no-build --verbosity normal $Env:SolutionFile -c $Env:Configuration
    
    - name: Pack
      run: dotnet pack $Env:SolutionFile --no-restore --no-build --configuration $Env:Configuration  -o ./nuget

    - name: Sign packages
      if: github.repository_owner == 'GeneXusLabs' && steps.buildVariables.outputs.SHOULD_DEPLOY == 'true'
      env:
        TIMESTAMPER_URL: ${{ secrets.CODE_SIGN_CERTIFICATE_TIMESTAMPER_URL }}
        PFX_BASE64: ${{ secrets.CODE_SIGN_CERTIFICATE_BASE64 }}
        PFX_PASS: ${{ secrets.CODE_SIGN_CERTIFICATE_PASSWORD }}
      run: |
        $codesign_pfx = "code_sign_cert.pfx"
        $bytes = [Convert]::FromBase64String($Env:PFX_BASE64)
        [IO.File]::WriteAllBytes($codesign_pfx, $bytes)

        Get-ChildItem ".\nuget\*.nupkg" -Recurse | ForEach-Object {
          dotnet nuget sign $_.FullName --certificate-path $codesign_pfx --certificate-password $Env:PFX_PASS --timestamper $Env:TIMESTAMPER_URL
        }
        
    - name: Configure Azure Artifacts feed
      if: github.repository_owner == 'GeneXusLabs' && steps.buildVariables.outputs.SHOULD_DEPLOY == 'true'
      run: |
        $IsPrerelease = [System.Convert]::ToBoolean($Env:IsPrerelease)

    - name: Push packages
      if: github.repository_owner == 'GeneXusLabs' && steps.buildVariables.outputs.SHOULD_DEPLOY == 'true'
      env:
        GPRFeedURL: https://nuget.pkg.github.com/genexuslabs/index.json
        NuGetFeedURL: https://api.nuget.org/v3/index.json
      run: |
        $IsPrerelease = [System.Convert]::ToBoolean($Env:IsPrerelease)

        $totalPackages  = 0
        $pushedToNuget  = 0

        Get-ChildItem ".\dotnet\*.nupkg" -Recurse | ForEach-Object {
          $PushToNugetArgs  = @("nuget", "push", $_.FullName, "--source", $Env:NuGetFeedURL, "--api-key", "${{ secrets.NUGET_ORG_TOKEN }}")

          if ([string]::IsNullOrEmpty("${{ github.event.inputs.skip-duplicates }}") ) {
            $skipDuplicates = $true
          } else {
            $skipDuplicates = [System.Convert]::ToBoolean("${{ github.event.inputs.skip-duplicates }}")
          }
          
          if ($skipDuplicates) {
            $PushToNugetArgs  += "--skip-duplicate"
          }
          
          if (!$IsPrerelease) {
            dotnet $PushToNugetArgs
            $pushedToNuget += 1
          }

          $totalPackages += 1
        }

        Write-Output "Number of packages found: $totalPackages"

        Write-Output "Number of packages pushed to Nuget.org: $pushedToNuget"

  dispatch-build:
    name: Dispatch build result
    needs: build
    if: github.repository_owner == 'GeneXusLabs' && needs.build.outputs.SHOULD_DEPLOY == 'true'
    
    runs-on: ubuntu-latest

    concurrency: 
      group: build-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout action
        uses: actions/checkout@v3
        with:
            repository: genexuslabs/dispatch-build-result
            ref: releases/v2
            token: ${{ secrets.SECURE_TOKEN }}
            path: ./tmp/.github/actions/dispatch-build-result

      - name: Dispatch build result
        uses: ./tmp/.github/actions/dispatch-build-result
        with:
          component-name: ${{ github.event.inputs.repository }}
          branch-ref: ${{ env.GIT_REF }}
          new-version: ${{ needs.build.outputs.NUGET_VERSION }}
          committer: ${{ needs.build.outputs.LAST_COMMITTER }}
          commit-message: ${{ needs.build.outputs.COMMIT_MESSAGE }}
          token: ${{ secrets.SECURE_TOKEN }}
